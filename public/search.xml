<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go语言初阶</title>
    <url>/2025/03/31/Go%E8%AF%AD%E8%A8%80%E5%88%9D%E9%98%B6/</url>
    <content><![CDATA[<h1 id="go第一印象">Go第一印象</h1>
<p>Go语言特点：简单，便于管理编写</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个struct类</span></span><br><span class="line"><span class="keyword">type</span> Class <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    PublicVariable <span class="type">string</span> <span class="comment">//公共变量的声明--变量类型首字母大写即可</span></span><br><span class="line">    privateVariable <span class="type">string</span> <span class="comment">//私有变量的声明--变量类型首字母小写即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共方法（函数）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SomeClass)</span></span> PublicMethod() (result )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>RNN简介</title>
    <url>/2025/04/25/RNN%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="rnn循环神经网络简要介绍">RNN(循环神经网络)简要介绍</h1>
<h2 id="简介">简介</h2>
<p>循环神经网络模型以序列数据为输入（数据内部的元素是有顺序关系的），如文章、语句、一周的天气信息、三个月的股市指数等。与传统的前馈网络不同的是，RNN模型处理序列数据能够获取更多的语义信息，时序信息等。</p>
<p>处理任务示例：</p>
<p>以NER（命名实体识别）为例，从自然语言文本中识别真实世界中的实体名及其类别。如：</p>
<p>句子1：I like eating apple!——其中的apple指的是苹果食物</p>
<p>句子2：The Apple is a great company！——其中的Apple指的是苹果公司</p>
<p>而如果是传统的DNN（深度神经网络）模型，由于输入方式为逐元素输入，无法有效获取上下文信息，则若训练集中的apple一词大部分被标记为苹果食物，那么对测试集中的apple处理也将全部标记为苹果食物而非根据实际上下文推断。</p>
<h2 id="模型提出">模型提出</h2>
<h3 id="基本rnn结构">基本RNN结构</h3>
<p>为了解决普通DNN（深度神经网络）逐元素输入而无法有效获取上下文信息的问题。RNN最基本的改良点在于增加一个模块用于储存上下文信息，下图即是一个典型的RNN结构示意：</p>
<img src="https://caimotu.top/Picgo/image-20250417165208064.png" alt="image-20250417165208064" style="zoom:33%;" />

<p>其中I（输入序列）到O（输出序列）的过程增加了一个保存上下文信息的权重矩阵W，也就是每次输出O不仅要考虑当前的输入数据I，还要考虑上一次输出的隐藏序列W（保存上下文）。RNN就是一个循环递归地处理上述输入输出的过程。</p>
<h3 id="rnn展开结构">RNN展开结构</h3>
<p>将上图的基本结构展开，就成为了下图展示的模型计算过程：</p>
<img src="https://caimotu.top/Picgo/ebe46967a3e80dab4c04635a2c6785f.jpg" alt="ebe46967a3e80dab4c04635a2c6785f" style="zoom:33%;" />

<p>其中 <span class="math inline">\(x_i\)</span>
表示i时刻的模型输入，<span class="math inline">\(y_i\)</span>表示<span
class="math inline">\(x_i\)</span>对应的输出结果，模型计算公式如下：
<span class="math display">\[
\begin{split}
y_i = g(Vh_i)
\\
\\
h_i = f(Ux_i + Wh_{i-1})
\end{split}
\]</span>
U表示当前输入数据的权重因子，W表示决定上下文信息影响程度的参数矩阵，<span
class="math inline">\(h_i\)</span>则表示当前隐藏层的输出隐变量。可以看出决定当前输出<span
class="math inline">\(y_i\)</span>的隐变量<span
class="math inline">\(h_i\)</span>不仅由当前输入<span
class="math inline">\(x_i\)</span>决定，也与上一时刻的隐变量<span
class="math inline">\(h_{i-1}\)</span>有关。（PS：整个模型计算过程里用的参数矩阵W是一定的）</p>
<h2 id="rnn模型结构变化">RNN模型结构变化</h2>
<p>上述展开结构会根据输入长度和输出长度的变化而产生不同的结构</p>
<h3 id="n-to-n结构">N to N结构</h3>
<p>这类结构的输入长度与输出长度相同，也即每一个输入值都会对应一个输出值。通常用于逐序列判断或分类任务（如序列标注，NER，视频帧分类等）。示例图与计算模型如2.2所述。</p>
<h3 id="n-to-1结构">N to 1结构</h3>
<p>这类结构只有一个输出值，表示输出结果包含了整个输入序列的语义信息和上下文信息。结构示意图：</p>
<img src="https://caimotu.top/Picgo/8606007dd425e9195f0c11d4719656f.jpg" alt="8606007dd425e9195f0c11d4719656f" style="zoom: 50%;" />

<p>计算模型： <span class="math display">\[
\begin{split}
Y = y_N = g(Vh_N)
\\
h_i = f(Ux_i+ Wh_{i-1})
\end{split}
\]</span> 这类结构通常用于文字分类、文章分类以及图像分类任务。</p>
<h3 id="1-to-n结构">1 to N结构</h3>
<p>一个输入数据对应一系列输出，其意义是一个起始状态或种子数据会随时间变化生成一个序列的输出结果。</p>
<p>若输入数据只在首个时刻输入，则计算示意图如下所示：</p>
<img src="https://caimotu.top/Picgo/112ce7e4cbc3de28915ec314a82fdba.jpg" alt="112ce7e4cbc3de28915ec314a82fdba" style="zoom:50%;" />

<p>而若输入数据在每个时刻都作为输入，则示意图如下：</p>
<img src="https://caimotu.top/Picgo/bd9767d63cc2fd88b9b265d80777250.jpg" alt="bd9767d63cc2fd88b9b265d80777250" style="zoom:50%;" />

<p>该结构通常用于由图像自动生成文章、类别生成音乐、文章、代码等由种子数据生成序列的任务。</p>
<h3 id="n-to-m结构encoder-decoder模型seq2seq模型">N to
M结构（encoder-decoder模型、seq2seq模型）</h3>
<p>最后一类是输入输出序列长度不相等的结构。通常采用一个N to 1结构和一个1
to M结构组合来实现，如下图：</p>
<img src="https://caimotu.top/Picgo/f529bf34ed1f0a34e98af6cd3b390b2.jpg" alt="f529bf34ed1f0a34e98af6cd3b390b2" style="zoom:50%;" />

<img src="https://caimotu.top/Picgo/6355d703227ac85b3ac67a61c52bd84.jpg" alt="6355d703227ac85b3ac67a61c52bd84" style="zoom: 33%;" />

<p>由上图可以看出，两个不同长度的RNN模型组合可以控制输出序列长度。两个模型之间通过一个上下文向量C来链接，其中C可作为第二个RNN模型的输入数据并对初始隐藏变量<span
class="math inline">\(h_0^{&#39;}\)</span>​进行初始化（如第一个图），也可以直接被用来初始化第二个RNN模型的隐藏变量（如第二个图）。</p>
<p>常用的上下文向量C的求解方法有： <span class="math display">\[
\begin{split}
c = h_N
\\
c = g(h_N)
\\
c = g(h_1 :: h_N)
\end{split}
\]</span>
第一种方法直接将encoder的输出作为上下文向量；第二种方法则需要先对encoder输出进行变换；第三种方法则将encoder的一个输出序列进行变换，而非单一选取最后一个输出。</p>
<p>通常将第一个RNN模型作为encoder（编码器），第二个RNN模型成为decoder（解码器）。通过这样N
to
M的RNN模型，我们可以处理各类序列处理任务，如语音识别，文本摘要，机器翻译，图像描述生成等。</p>
<h2 id="梯度消失与梯度爆炸">梯度消失与梯度爆炸</h2>
<h3 id="概念">概念</h3>
<p>由于RNN中的上下文参数矩阵是权重共享的，即当进行梯度更新时，对该矩阵求偏导数时需要加入时序影响，将导致存在基于时序数量的权重“连乘”。若某一阶段权重值过小，结合“连乘”将导致最终权重趋于“无穷小”（即等于0），此现象称为“梯度消失”。相反地，若权重值过大，经连乘后将导致权重值变得过大，称为“梯度爆炸”。</p>
<p>与普通NN的梯度消失及梯度爆炸不同，RNN的梯度爆炸（或消失）是根本原因是“连乘”，是在反向传播的某一阶段出现的，在此之前的反向传播不受影响。</p>
<h3 id="如何解决">如何解决</h3>
<p><strong>1. 梯度爆炸的解决</strong></p>
<p>1）梯度裁剪</p>
<p>​
梯度裁剪即为梯度更新时的梯度设置上限，当超过阈值将强制裁剪，避免出现过高阈值。</p>
<p><strong>2. 梯度消失的解决</strong></p>
<p>1）使用Relu激活函数</p>
<p>​
使用Relu激活函数解决梯度消失的原理是，Relu函数在自变量大于0是，因变量恒为1，由此避免梯度过小。</p>
<p>2）变更RNN结构</p>
<p>​ 改用变种版本的RNN结构，常见的包括LSTM模型及GRU模型。</p>
]]></content>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法总结</title>
    <url>/2025/02/27/markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1
id="markdown语法总结"><span style="font-size:0.8em;">Markdown语法总结</span></h1>
<p>前置声明：以下大部分语法在Typora中都可以通过右键找到对应的快捷插件，学习语法一方面是方便我们灵活编辑md文本，无须反复腾出手去滑动点击鼠标，一方面是为了在一般的编辑器里也能正确编写md文件。</p>
<h2 id="标题">标题</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题  </span></span><br><span class="line"><span class="section">## 二级标题  </span></span><br><span class="line"><span class="section">### 三级标题  </span></span><br><span class="line"><span class="section">#### 四级标题  </span></span><br><span class="line"><span class="section">##### 五级标题  </span></span><br><span class="line"><span class="section">###### 六级标题  </span></span><br><span class="line"></span><br><span class="line">PS：在#后面要添加一个空格再跟标题内容</span><br></pre></td></tr></table></figure>

<h2 id="段落与换行">段落与换行</h2>
<ol type="1">
<li>普通换行需要在换行处添加两个空格，如：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这里是第一行（随后跟两个空格 + “enter”，再打出下一行内容即可）  </span><br><span class="line">这里是第二行</span><br></pre></td></tr></table></figure>

<ol start="2" type="1">
<li>换段落（行与行之间多一空白行）：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这里是第一段（随后连续打出两个回车enter）</span><br><span class="line"></span><br><span class="line">这里是第二段</span><br></pre></td></tr></table></figure>

<p>PS：上述规则应该适用于一般的文本编辑器里编写markdown文件的情况。</p>
<p>但是不同编辑器/网页由于使用的渲染器不同，实际展现出来的效果也可能有所差异。比如本人在使用Typora1.8.10版本时发现一个enter就会被实时渲染成换段落，即使使用两个空格再enter也会直接被渲染为换段落。</p>
<p>因此建议确实需要换行功能的博主，<strong>进入源代码模式</strong>编写markdown文档，便于使用原始版本的语法而不会被Typora渲染器的不同效果影响。如果觉得换行和换段落区别不大，也可以直接按照Typora的特性来——统一使用一个enter换段落的方式开启新的一段内容。</p>
<h2 id="文本效果加粗与斜体与中划线">文本效果：加粗与斜体与中划线</h2>
<p><strong>在一段文本的起始和终止位置分别添加两个星号，如本行文字即是在编辑器中如此操作后的加粗效果。</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**在一段文本的起始位置和终止位置分别添加两个星号**</span></span><br><span class="line">或者</span><br><span class="line"><span class="strong">__使用下划线也可以实现相同的效果__</span></span><br></pre></td></tr></table></figure>

<p><em>斜体方式与文本加粗同理，但改为使用一个星号或一个下划线。</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*这是一行斜体文字*</span></span><br><span class="line"><span class="emphasis">_这也是一行斜体_</span></span><br></pre></td></tr></table></figure>

<p><del>中划线（删除线）则使用两个波浪号</del></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~这是一行删除线文字~~</span><br></pre></td></tr></table></figure>

<p><del><em><strong>如果要实现同时加粗和斜体和中划线，则将星号或者下划线的数量改成三个，再外加两个波浪号即可（叠加原理）</strong></em></del></p>
<h2 id="段落间分割线">段落间分割线</h2>
<p>三个及以上的星号*或者下划线_即可</p>
<hr />
<p>如此处所示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">天青色等烟雨</span><br><span class="line"><span class="strong">____</span>(或者<span class="strong">****</span>) </span><br><span class="line">而我在等你</span><br></pre></td></tr></table></figure>

<h2 id="列表编写">列表编写</h2>
<h3 id="无序列表">无序列表</h3>
<ul>
<li>列表的符号是*或者+或者-（后面加一个空格再接文本）</li>
<li>一般编辑器中，同一个列表（每一项紧邻）的每一项前面添加的列表符号必须相同，否则会被渲染成两个不同的列表（间隔较大）</li>
<li>Typora中，同一列表里一项末尾直接enter可以产生下一项，再次enter会消除自动添加的列表格式。使用不同的列表符号也不会有换列表效果，只能再加一个enter手动产生行距再添加新列表。（有序列表同理）</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项任务</span><br><span class="line"><span class="bullet">*</span> 第二项任务</span><br><span class="line"><span class="bullet">*</span> 第三项任务</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 另一个列表第一项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 这又是一个新的列表</span><br></pre></td></tr></table></figure>

<h3 id="有序列表">有序列表</h3>
<ol type="1">
<li>列表第一项用“数字 + . +空格”</li>
<li>后续换行就会自动产生第二项</li>
<li>顺序是由列表第一项决定的，后面每一项的序号都自动递增。</li>
</ol>
<h3 id="列表嵌套">列表嵌套</h3>
<ul>
<li><p>一级列表下直接编写文本的方法：enter换行+回车，再编写文本即可。</p></li>
<li><p>在一级列表里嵌套二级列表的方式：在一级列表的某一项后换行，回车删除自动添加的一级序号，再用“数字
+ . + 空格”或者“* +
空格”，即可实现该项下创建二级有序或无序列表（后面介绍的复选框列表也可以这样嵌套）。</p></li>
<li><p>若要跳出二级列表循环，重新创建上一级列表的下一项，则连续按下三次enter即可（连续两次是消除二级列表格式，直接在一级列表的该项下编写普通文本，编写文本后需要再连续按两次enter才能跳出一级列表的该项，新建一级列表的下一项）</p></li>
</ul>
<p>示例：</p>
<ol type="1">
<li><p>一级列表第一项（然后enter换行+回车，直接在该项下编写文本）</p>
<p>一级列表下的一段文本。（一个enter+“1 + . +
空格”,继续创建二级有序列表）</p>
<ol type="1">
<li><p>二级列表第一项（一个enter创建同级下一项）</p></li>
<li><p>二级列表第二项（enter换行+回车，直接在该项下编写文本）</p>
<p>二级列表下编写一段文本。（两次enter消除二级列表下的文本格式，创建二级列表下一项）</p></li>
<li><p>二级列表第三项</p></li>
</ol></li>
<li><p>一级列表第二项（enter换行+回车+“1 + . + 空格”创建二级列表）</p>
<ol type="1">
<li>二级列表第一项（连续三次enter跳出二级列表循环创建一级列表下一项）</li>
</ol></li>
<li><p>一级列表第三项</p>
<ol type="1">
<li>二级列表第一项（两次enter消除二级列表格式，直接在一级列表该项下编写文本）</li>
</ol>
<p>一级列表下的一段文本。（再连续两次enter跳出一级列表该项，新建一级列表下一项）</p></li>
<li><p>一级列表第四项</p></li>
</ol>
<h3 id="勾选框">勾选框</h3>
<ul class="task-list">
<li><label><input type="checkbox"
checked="" />第一项任务已完成</label></li>
<li><label><input type="checkbox" />第二项任务未完成</label></li>
</ul>
<p>像这样的勾选框列表如何实现呢？(勾选框是否可勾选和html渲染插件有关)</p>
<p>操作方法是在无序列表符号*后面跟上“空格+[空格填充]+空格”，若[]内用字母x填充则变为选中状态，用空格填充则为非选中状态。</p>
<h2 id="代码块">代码块</h2>
<p>Typora里可以直接右键调用插件插入代码块，一般通用的方法是在需要设置为代码块的段落前一行和后一行分别添加```</p>
<p>第一行```后面跟代码块格式（c++，java等）</p>
<p>如下所示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```c++(在```</span>后面跟代码块格式)</span><br><span class="line">代码段落</span><br><span class="line">代码段落</span><br><span class="line">代码段落</span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>如果要在行内插入小代码块<code>小代码块</code>，则在要设为小代码块的内容前后分别添加`</p>
<p>如下所示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一行<span class="code">`markdown`</span>代码块。</span><br></pre></td></tr></table></figure>

<p>小代码块的使用场景一般有两种：</p>
<ol type="1">
<li>需要在行内插入代码辅助解释。</li>
<li>有特殊符号，为保留原文本，避免被解析成某种语法或者链接，可以将其用代码块包裹。</li>
</ol>
<p>PS：如果需要直接插入网页URL，为不被解析为其他符号且能点击跳转，同时避免URL后的文本也被解析为链接的一部分，可以使用<code>&lt;&gt;</code>符号包裹URL，第一个&lt;表示链接开始，第二个&gt;表示链接结束。</p>
<h2 id="引用">引用</h2>
<p>在每一行要引用的内容开头加符号&gt;和空格即可</p>
<p>若要嵌套，使用多个<code>&gt;</code>符号即可</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一段引用的文本，来自某公众号文章</span></span><br><span class="line"><span class="quote">&gt; - 引用里面也可以嵌套其他格式如列表，代码块和二级引用</span></span><br><span class="line"><span class="quote">&gt; - 引用部分内的其他语法都可嵌套，其他格式内也可以嵌套引用，将符号顺序改一下即可。</span></span><br><span class="line"><span class="bullet">-</span> &gt; 比如这里就是在一个列表里插入引用</span><br><span class="line">  &gt;&gt;在引用里嵌套引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一段引用的文本，来自某公众号文章</p>
<ul>
<li>引用里面也可以嵌套其他格式如列表，代码块和二级引用</li>
<li>引用部分内的其他语法都可嵌套，其他格式内也可以嵌套引用，将符号顺序改一下即可。</li>
</ul>
</blockquote>
<ul>
<li><blockquote>
<p>比如这里就是在一个列表里插入引用</p>
<blockquote>
<p>在引用里嵌套引用</p>
</blockquote>
</blockquote></li>
</ul>
<h2 id="超链接">超链接</h2>
<p>普通超链接使用<code>[]()</code>符号，填充规则如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[要跳转的目标名称，如我的个人网站](网站域名)</span><br><span class="line">示例：</span><br><span class="line">[我的博客](ccloire.com)</span><br><span class="line">之后就会渲染为一行可点击跳转的加粗“我的博客”文本，点击即可跳转到ccloire.com网站</span><br></pre></td></tr></table></figure>

<p>域名分离超链接：</p>
<p>若域名太长且多处需要调用网页超链接，则为了编写时更加简洁高效，也可以采用重命名的方式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[我的博客][a]里面有我的个人技术文章，欢迎大家光临，也可以去[代码随想录][b]里查找算法练习。</span><br><span class="line">别名还可以反复使用，如[柯北的技术博客][a]渲染后也是跳转到https://ccloire.com的超链接</span><br><span class="line"></span><br><span class="line">[a]: https://ccloire.com</span><br><span class="line">[b]: https://algorithm.com</span><br></pre></td></tr></table></figure>

<h2 id="脚注">脚注</h2>
<p>感兴趣的读者可以前往我的个人网站<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>像这样给一段文本加注释角标，鼠标点击时跳转注释（若有网页链接也可以直接点击跳转）的方式如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">个人网站[^1],第二个脚注[^2]</span><br><span class="line"></span><br><span class="line">[^1]:网站有两个https://ccloire.com或https://ccloire2.com</span><br><span class="line">[^2]:随便什么内容</span><br></pre></td></tr></table></figure>

<h2 id="插入图像">插入图像</h2>
<img src="https://caimotu.top/Picgo/微信图片_20250226100519.jpg" alt="样例图" style="zoom:50%;" />

<ul>
<li><p>常规语法：</p>
<p>像这样插入图片的常规语法是<code>![图片名称](图片路径)</code>，图片路径可以是本地路径---但只能在本机访问该图片；也可以是URL链接指向网址中的图片---能联网就能访问。</p></li>
<li><p>快捷方法：</p>
<p>在Typora中，安装插件即可支持右键选择插入图像功能，自动补充图像语法，用户只需点击文件夹图标在本地选择要上传的图片或者手动输入图片链接即可。插件网盘链接：<a
href="https://pan.baidu.com/s/1h19j_es-iW4GVrkmUWIL7g?pwd=3251">https://pan.baidu.com/s/1h19j_es-iW4GVrkmUWIL7g?pwd=3251</a>，有需要的读者自取，提取码3251。
也可以扫码领取：<img
src="https://caimotu.top/Picgo/image-20250331132048320.png"
alt="image-20250331132048320" /></p>
<p>插件安装方法：将插件文件夹下的plugin文件夹复制粘贴到这个目录下：D:\Program
Files\Typora\resources（D:\Program
Files是我的Typora安装位置，具体以读者的实际安装位置为准），然后运行<code>plugin\bin\install_windows_amd_x64.exe</code>，这个脚本会修改Typora\resources目录下的windows.html文件，使得插件在Typora中正常运行。</p>
<p>插件使用说明见官网文档：<a
href="https://github.com/obgnail/typora_plugin?tab=readme-ov-file#%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">https://github.com/obgnail/typora_plugin?tab=readme-ov-file#%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E</a></p></li>
<li><p>本地图片转化为网页链接的方法---搭建个人图床：详见本站的另一篇文章</p></li>
<li><p>图片的缩放---使用HTML语法：</p>
<p>markdown编辑器一般都支持部分HTML格式，因此我们可以用如下语法来插入图片并调整其大小</p>
<p><code>&lt;img style="width: 500px;height: 300px" src="https://caimotu.top/Picgo/image-20250331132048320.png" alt ="示例图片" /&gt;</code>。</p>
<p><code>style</code>变量指定了图片的大小风格，<code>src</code>变量指定了图片的URL链接，<code>alt</code>变量指定了渲染后图片下方的注释名称（但不是所有网页和编辑器都会显示这个alt名称）。</p>
<p>PS:
Typora插件支持右键直接修改图片缩放比例，将markdown语法转换为HTML语法。</p></li>
</ul>
<h2 id="插入视频">插入视频</h2>
<p>插入外部网站的视频需要使用HTML语法，常用的方式是<code>&lt;iframe&gt;</code>标签，示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com/video/BV1vtoXY9E7v?vd_source=4b639497636747eb9e7ebb76d4d0b7cf&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: auto; aspect-ratio: 16/9; border: 20px solid black&quot;</span>   #<span class="attr">视频格式</span></span></span><br><span class="line"><span class="tag">        (<span class="attr">其中border表示边框样式</span>，<span class="attr">aspect-ratio表示视频比例</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span>   #<span class="attr">是否允许滚动</span></span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">&quot;yes&quot;</span>   #<span class="attr">是否设置边框</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>   #<span class="attr">允许全屏播放</span></span></span><br><span class="line"><span class="tag">        <span class="attr">title</span>=<span class="string">&quot;bilibili视频&quot;</span>   #<span class="attr">视频标题</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下示例视频展示效果</p>
<iframe 
        src="//player.bilibili.com/player.html?isOutside=true&aid=114087434454472&bvid=BV11RXRYuEdL&cid=28640083971&p=1"
        style="width: 100%; height: auto; aspect-ratio: 16/9; border: 20px solid black" 
        scrolling="no" 
        frameborder="yes" 
        framespacing="0"
        allowfullscreen="true"
        title="bilibili视频"
        ></iframe>

<h2 id="插入表格">插入表格</h2>
<p>markdown中添加表格的方式是很形象的，使用<code>|</code>和<code>-</code>两个符号构成表格的形状即可。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|   | 姓名 | 年龄 | 性别 |      </span><br><span class="line">| - | --- | ---- | --- |      </span><br><span class="line">| 1 | 小明 |  18  | 男  |     </span><br><span class="line">| 2 | 小红 |  18  | 女  |                                   </span><br></pre></td></tr></table></figure>

<p>“|”
后面接一个空格再跟表头内容，“-”表示表头和项之间的分割线，一个“-”即可正常渲染，使用多个“-”是为了编辑上与表格形状尽量贴近，便于查看。</p>
<p>如果要控制每一列内容的对齐格式，可以在分割线的“-”两边添加“:”</p>
<p>左边添加表示左对齐，右边添加表示右对齐，两边同时添加表示居中。</p>
<p>PS： Typora中的插件也可以实现一键插入表格和一键编辑。</p>
<table>
<thead>
<tr>
<th style="text-align: center;"></th>
<th style="text-align: center;">姓名</th>
<th style="text-align: center;">年龄</th>
<th style="text-align: center;">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">1</td>
<td style="text-align: center;">小明</td>
<td style="text-align: center;">18</td>
<td style="text-align: center;">男</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td style="text-align: center;">小红</td>
<td style="text-align: center;">18</td>
<td style="text-align: center;">女</td>
</tr>
</tbody>
</table>
<h2 id="其他拓展语法">其他拓展语法：</h2>
<img src="https://caimotu.top/Picgo/image-20250402173231226.png" alt="image-20250402173231226" style="zoom:50%;" />

<p>Typora支持上图展示的几种拓展语法。</p>
<p>对于内联公式，此处展示一些常用的Latex语法：</p>
<ul>
<li><p>单独一行Latex数学公式用左右各一个<code>$</code>包裹，比如<code>$y = x + 10$</code>，渲染后就是
<span class="math inline">\(y = x + 10\)</span></p></li>
<li><p>若要编写一段多行公式，可以在公式段前后添加<code>$$</code>，内部使用<code>\begin&#123;split&#125; A\\B \end&#123;split&#125;</code>进行换行，<code>\\</code>要写在行与行之间，这是因为Mathjax渲染器的局限（无法直接识别单独的<code>\\</code>换行）；hexo-filter-mathjax插件会对每个<code>$$</code>公式段自动编号。<br />
示例如下：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;split&#125;</span><br><span class="line">y = x + 10</span><br><span class="line"><span class="keyword">\\</span></span><br><span class="line">y = x - 10</span><br><span class="line"><span class="keyword">\end</span>&#123;split&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>​ 渲染后为： <span class="math display">\[
\begin{split}
y = x + 10
\\
y = x - 10
\end{split}
\]</span></p>
<ul>
<li><p>分式语法：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，示例：<span
class="math inline">\(\frac{1}{10}\)</span></p></li>
<li><p>上下标：除了上图中<code>~下标~</code>和<code>^上标^</code>的写法外，还可以直接在内联公式段里使用单独的下划线_表示下标，单独的^表示上标。</p>
<p>而且Latex语法支持同时使用上下标，如<code>x_2^&#123;2x&#125;</code>，渲染后效果:
<span class="math inline">\(x_2^{2x}\)</span></p></li>
<li><p>开根号：<code>\sqrt[4]&#123;3&#125;</code>表示给3开四次根：<span
class="math inline">\(\sqrt[4]{3}\)</span></p>
<p>如果要给一串代数式开根，又不想代数式中的某些<code>&#123;&#125;</code>符号被解析成语法格式，可以使用转义符<code>\</code>，如<code>$\sqrt[4]&#123;\&#123;(4+x) - 3\&#125;&#125;$</code>，渲染后为：<span
class="math inline">\(\sqrt[4]{\{4+x)-3\}}\)</span></p></li>
<li><p>常见数学符号：</p>
<ol type="1">
<li>不等于：<code>\not=</code> <span
class="math inline">\(\not=\)</span></li>
<li>与等于：<code>\approx</code> <span
class="math inline">\(\approx\)</span></li>
<li>小于等于：<code>\leq</code> <span
class="math inline">\(\leq\)</span></li>
<li>大于等于：<code>\geq</code> <span
class="math inline">\(\geq\)</span></li>
<li>乘号：<code>\times</code> <span
class="math inline">\(\times\)</span></li>
<li>除号：<code>\div</code>或者<code>\textdiv</code> <span
class="math inline">\(\div\)</span></li>
<li>正负号：<code>\pm</code> <span
class="math inline">\(\pm\)</span></li>
<li>求和符号(配合上下标)：<code>\sum^2_2</code> <span
class="math inline">\(\sum^2_2\)</span></li>
<li>累乘：<code>\prod</code> <span
class="math inline">\(\prod\)</span></li>
<li>度数： <code>90^\circ</code> <span
class="math inline">\(90^\circ\)</span></li>
<li>三角函数：<code>\sin\pi</code> <span
class="math inline">\(\sin\pi\)</span> 其余同理</li>
<li>无穷：<code>\infty</code> <span
class="math inline">\(\infty\)</span></li>
<li>定积分：<code>\int^b_ax^2dx</code> <span
class="math inline">\(\int^b_ax^2dx\)</span> (PS：
n重积分就用n个i，如三重积分<code>\iiint</code><span
class="math inline">\(\iiint\)</span>)</li>
<li>求导符号：<code>y\prime</code> <span
class="math inline">\(y\prime\)</span></li>
<li>元素属于/不属于集合：<code>x\in A</code>以及<code>x\notin A</code>
<span class="math inline">\(x\in A\)</span> 以及 <span
class="math inline">\(x\notin A\)</span></li>
<li>极限：<code>\lim_&#123;n\rightarrow+\infty&#125;\frac&#123;1&#125;&#123;n&#125;</code> <span
class="math inline">\(\lim_{n\rightarrow+\infty}\frac{1}{n}\)</span>​</li>
<li>省略号：<code>\frac&#123;1&#125;&#123;2&#125;+\frac&#123;1&#125;&#123;3&#125;+\cdots+\frac&#123;1&#125;&#123;n&#125;</code>
<span
class="math inline">\(\frac{1}{2}+\frac{1}{3}+\cdots+\frac{1}{n}\)</span>​</li>
</ol></li>
</ul>
<p>更多markdown中编写Latex语法的内容可以查看<a
href="https://www.cmor-faculty.rice.edu/~heinken/latex/symbols.pdf">莱斯大学Latex
Math在线手册</a></p>
<p>还可以翻阅一位up的帖子，介绍的也很全面<a
href="https://zhuanlan.zhihu.com/p/59412540">来自李东的知乎帖子</a>。</p>
<h2 id="使用内置的mermaid插件画图">使用内置的mermaid插件画图</h2>
<p>markdown格式支持对使用mermaid绘制的图表进行渲染，只要在markdown编辑器中安装mermaid拓展插件即可。Typora本身就集成了mermaid环境，因此可以直接在代码块中声明语法为mermaid并进行绘图。</p>
<blockquote>
<p>PS：
mermaid最新版目前已经更新到11.6以后了，而各大markdown编辑器如Typora不一定有对最新版mermaid插件的支持。且某些Typora破解版也只能激活旧版本，对mermaid插件支持也比较低级。故实际使用时有些mermaid语法可能无法正常渲染，读者有需要可以去<a
href="https://mermaid.js.org/">mermaid官网</a>使用最新版本，官网内也附带非常详细的<a
href="https://mermaid.js.org/ecosystem/tutorials.html">mermaid部署，语法以及配置教程</a>。</p>
<p>对于写博客的同志，有可能你的博客配置进行了最新版本mermaid的部署（比如我使用的是hexo-theme-butterfly，主题适配了11.4.1版本的mermaid），这种情况你可以在Typora里用源代码模式编写mermaid，以实际博客网站渲染出来的效果为准。当然如果你更习惯Typora这种即使渲染的效果，且想以Typora里的编辑为准，那就只能接受一些版本局限。</p>
</blockquote>
<p>下面介绍一些常用且通用的mermaid基础语法。</p>
<h3 id="流程图">流程图</h3>
<p>Typora中集成了两种绘制流程图的插件，一个就是mermaid，另一个是较为简单的flow（只能绘制流程图）</p>
<p>下面介绍这两种插件绘制流程图的方法（在代码块中声明语法为mermaid或flow）：</p>
<h4 id="flow插件绘制">flow插件绘制</h4>
<div id="flowchart-0" class="flow-chart"></div>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始     //st表示结点命名，“=&gt;start: 开始”表示指结点类型和填充内容</span><br><span class="line">on=&gt;operation: 执行内容</span><br><span class="line">cn=&gt;condition: 执行是否成功</span><br><span class="line">en=&gt;end: 结束</span><br><span class="line">st-&gt;on        //&quot;-&gt;&quot;表示结点之间的有向线段</span><br><span class="line">on-&gt;cn(yes)-&gt;en      //condition类结点可以指定条件为&quot;yes&quot; or &quot;no&quot;</span><br><span class="line">cn(no)-&gt;on</span><br></pre></td></tr></table></figure>

<h4 id="mermaid插件绘制">mermaid插件绘制</h4>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">  A--&gt;B</span><br><span class="line">  B--&gt;C</span><br><span class="line">  C--&gt;A</span><br><span class="line">%% mermaid注释内容（%%注释不会被识别为图表语法）</span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">graph TB;
  A--&gt;B
  B--&gt;C
  C--&gt;A</code></pre>

<p>语法简析：</p>
<ul>
<li><p>graph表示流程图的开始，TB表示箭头方向从上到下，A--&gt;B表示A结点指向B结点。</p>
<p>结点没有声明类型和内容时默认为矩形结点，并以编号填充。</p></li>
<li><p>其他的箭头方向还有：</p></li>
</ul>
<table>
<thead>
<tr>
<th>用词</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>TB</td>
<td>从上到下</td>
</tr>
<tr>
<td>BT</td>
<td>从下到上</td>
</tr>
<tr>
<td>RL</td>
<td>从右到左</td>
</tr>
<tr>
<td>LR</td>
<td>从左到右</td>
</tr>
</tbody>
</table>
<ul>
<li>下面是mermaid流程图常见的符号及含义：</li>
</ul>
<table>
<thead>
<tr>
<th>用词</th>
<th>说明</th>
<th style="text-align: left;">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>node_id[结点内容]</td>
<td>矩形结点</td>
<td style="text-align: left;">表示过程，即流程中的某个环节</td>
</tr>
<tr>
<td>node_id(结点内容)</td>
<td>圆角矩形结点</td>
<td style="text-align: left;">表示开始或结束</td>
</tr>
<tr>
<td>node_id((结点内容))</td>
<td>圆形结点</td>
<td
style="text-align: left;">表示链接，用于流程过长或有交叉的情形，将流程分成两部分</td>
</tr>
<tr>
<td>node_id{结点内容}</td>
<td>菱形结点</td>
<td style="text-align: left;">表示条件判断或决策</td>
</tr>
<tr>
<td>node_id&gt;结点内容]</td>
<td>右向旗帜状结点</td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<pre><code class="highlight mermaid">graph 
A[矩形结点] 
B(圆角矩形节点)
C((圆形结点))
D&#123;菱形结点&#125;
E&gt;右向旗帜状结点]</code></pre>

<ul>
<li><p>下面是常见的连线类型：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A1--&gt;B1</span><br><span class="line">  A2---B2</span><br><span class="line">  A3--text---B3</span><br><span class="line">  A4--text--&gt;B4</span><br><span class="line">  A5-.-B5</span><br><span class="line">  A6-.-&gt;B6</span><br><span class="line">  A7-.text.-B7</span><br><span class="line">  A8-.text.-&gt;B8</span><br><span class="line">  A9===B9</span><br><span class="line">  A10==&gt;B10</span><br><span class="line">  A11==text===B11</span><br><span class="line">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">graph TB
  A1--&gt;B1
  A2---B2
  A3--text---B3
  A4--text--&gt;B4
  A5-.-B5
  A6-.-&gt;B6
  A7-.text.-B7
  A8-.text.-&gt;B8
  A9===B9
  A10==&gt;B10
  A11==text===B11
  A12==text==&gt;B12</code></pre>
</li>
<li><p>子图表的绘制：</p>
<p>mermaid画流程图可以在一个图表里嵌套子图表，来实现独立模块的划分。</p>
<p>子图表的箭头方向可以单独指定，但如果子图表的结点和外部产生链接，则子图表的箭头方向会失效，取而代之的是继承父类图表的方向。</p>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">	subgraph 子图表-工作流 </span></span><br><span class="line"><span class="code">		direction LR</span></span><br><span class="line"><span class="code">	    begin(打开电脑)--&gt;work[敲代码干活]</span></span><br><span class="line"><span class="code">	end</span></span><br><span class="line"><span class="code">	stop&#123;休息会&#125;</span></span><br><span class="line"><span class="code">	work--&gt;temp&#123;干活满45分钟没&#125;--&gt;|no| work</span></span><br><span class="line"><span class="code">	temp --&gt;|yes| stop--&gt;|休息满10分钟| work</span></span><br><span class="line"><span class="code">	stop--&gt;|没满十分钟| stop</span></span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">graph TB
	subgraph 子图表-工作流 
		direction LR
	    begin(打开电脑)--&gt;work[敲代码干活]
	end
	stop&#123;休息会&#125;
	work--&gt;temp&#123;干活满45分钟没&#125;--&gt;|no| work
	temp --&gt;|yes| stop--&gt;|休息满10分钟| work
	stop--&gt;|没满十分钟| stop</code></pre>
</li>
</ul>
<h3 id="序列图">序列图</h3>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">	Title: 谈恋爱</span></span><br><span class="line"><span class="code">	男孩-&gt;&gt;女孩: 我喜欢你</span></span><br><span class="line"><span class="code">	女孩--&gt;&gt;男孩: 你是个好人</span></span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">sequenceDiagram
	Title: 谈恋爱
	男孩-&gt;&gt;女孩: 我喜欢你
	女孩--&gt;&gt;男孩: 你是个好人</code></pre>

<p>语法解析：</p>
<h4 id="参与者">参与者：</h4>
<p>参与者表示序列图中一切可以交互的事物，可以是人，类对象或系统。而每个参与者上下之间的竖线表示时间的流逝。</p>
<p>声明参与者的语法为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant 参与者1</span></span><br><span class="line"><span class="code">    participant 参与者2</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    participant 简称 as 参与者n  //此写法可以在后文用简称代替“参与者n”</span></span><br></pre></td></tr></table></figure>

<h4 id="消息线">消息线</h4>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;</td>
<td>无箭头的实线</td>
</tr>
<tr>
<td>--&gt;</td>
<td>无箭头的虚线</td>
</tr>
<tr>
<td>-&gt;&gt;</td>
<td>带箭头的实线</td>
</tr>
<tr>
<td>--&gt;&gt;</td>
<td>带箭头的虚线</td>
</tr>
<tr>
<td>-x</td>
<td>末端为x的实线（表示异步执行）</td>
</tr>
<tr>
<td>--x</td>
<td>末端为x的虚线（表示异步执行）</td>
</tr>
</tbody>
</table>
<h4 id="处理中激活框">处理中—激活框</h4>
<p>在参与者的时间线上标记一个激活框，表示对某一条消息进行处理的时间间隔</p>
<p>在消息线末尾，消息接收方前添加一个“+”，则消息接收者进入对该消息的“处理中”状态。</p>
<p>在消息线末尾，消息接收方前添加一个“-”，则消息接收者离开对该消息的“处理中”状态。</p>
<h4 id="注释">注释</h4>
<p>注释格式为：<code>Note 位置表述 参与者: 注释内容</code></p>
<p>位置表述有：</p>
<ul>
<li>right of ：右侧</li>
<li>left of ：左侧</li>
<li>over ：横跨在多个参与者之中</li>
</ul>
<h4 id="循环">循环</h4>
<p>满足一定条件时，重复发出消息序列。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">loop 执行条件</span><br><span class="line"><span class="code">	要执行的消息序列</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure>

<h4 id="选择">选择</h4>
<p>类似else-if这样的条件判断语句：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">alt 条件1</span><br><span class="line"><span class="code">	执行语句1</span></span><br><span class="line"><span class="code">else 条件2</span></span><br><span class="line"><span class="code">	执行语句2</span></span><br><span class="line"><span class="code">else 条件3</span></span><br><span class="line"><span class="code">	执行语句3</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure>

<h4 id="并行">并行</h4>
<p>par并行序列表示多个动作同时进行：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">par 并行序列名称</span><br><span class="line"><span class="code">	执行语句1</span></span><br><span class="line"><span class="code">and </span></span><br><span class="line"><span class="code">	执行语句2</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">	Title: 买炸鸡</span></span><br><span class="line"><span class="code">	participant A as Loire</span></span><br><span class="line"><span class="code">	participant B as 炸鸡店老板</span></span><br><span class="line"><span class="code">	Note left of A: 18岁</span></span><br><span class="line"><span class="code">	Note right of B: 38岁</span></span><br><span class="line"><span class="code">	Note over A,B: 人民广场的一个午后</span></span><br><span class="line"><span class="code">	loop 十秒钟一次，执行30秒</span></span><br><span class="line"><span class="code">		A -x +B: 我炸鸡好了吗</span></span><br><span class="line"><span class="code">		B --&gt;&gt; -A: 还在炸</span></span><br><span class="line"><span class="code">	end</span></span><br><span class="line"><span class="code">	A --x +B: 还要炸多久</span></span><br><span class="line"><span class="code">	B --&gt;&gt; -A: 还有x分钟</span></span><br><span class="line"><span class="code">	alt x &gt; 20</span></span><br><span class="line"><span class="code">		A -&gt;&gt; B: 我不要了</span></span><br><span class="line"><span class="code">	else x &lt; 20 &amp;&amp; x &gt; 10</span></span><br><span class="line"><span class="code">		A -&gt;&gt; B: 炸的真慢</span></span><br><span class="line"><span class="code">	else x &lt; 10</span></span><br><span class="line"><span class="code">		A -&gt;&gt; B: 好的</span></span><br><span class="line"><span class="code">	end</span></span><br><span class="line"><span class="code">	par 悠闲地炸鸡</span></span><br><span class="line"><span class="code">		B -&gt;&gt; B: 哼歌</span></span><br><span class="line"><span class="code">	and </span></span><br><span class="line"><span class="code">		B -&gt;&gt; B: 包装炸鸡</span></span><br><span class="line"><span class="code">	end</span></span><br><span class="line"><span class="code">	B --&gt;&gt; A: 炸鸡好了</span></span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">sequenceDiagram
	Title: 买炸鸡
	participant A as Loire
	participant B as 炸鸡店老板
	Note left of A: 18岁
	Note right of B: 38岁
	Note over A,B: 人民广场的一个午后
	loop 十秒钟一次，执行30秒
		A -x +B: 我炸鸡好了吗
		B --&gt;&gt; -A: 还在炸
	end
	A --x +B: 还要炸多久
	B --&gt;&gt; -A: 还有x分钟
	alt x &gt; 20
		A -&gt;&gt; B: 我不要了
	else x &lt; 20 &amp;&amp; x &gt; 10
		A -&gt;&gt; B: 炸的真慢
	else x &lt; 10
		A -&gt;&gt; B: 好的
	end
	par 悠闲地炸鸡
		B -&gt;&gt; B: 哼歌
	and 
		B -&gt;&gt; B: 包装炸鸡
	end
	B --&gt;&gt; A: 炸鸡好了</code></pre>

<h3 id="饼图">饼图</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">pie    //声明饼图</span><br><span class="line"><span class="code">	title 编程语言流行度   //饼图标题</span></span><br><span class="line"><span class="code">	&quot;C++&quot; : 200    //组成部分以及其数量（最多支持两位小数）</span></span><br><span class="line"><span class="code">	&quot;Java&quot; : 120</span></span><br><span class="line"><span class="code">	&quot;Go&quot; : 80</span></span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">pie
	title 编程语言流行度
	&quot;C++&quot; : 200
	&quot;Java&quot; : 120
	&quot;Go&quot; : 80</code></pre>

<h3 id="甘特图">甘特图</h3>
<p>甘特图的基本构成如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gantt   //声明甘特图</span><br><span class="line"><span class="code">	title 标题</span></span><br><span class="line"><span class="code">	dataFormat 日期格式（指甘特图下方时间线的日期格式，一般用YYYY-MM-DD）</span></span><br><span class="line"><span class="code">    excludes 不工作的时间段</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    section 任务名</span></span><br><span class="line"><span class="code">    任务名: 参数1，参数2，参数3，参数4，参数5，参数6</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>excludes:
后跟具体日期（2025-01-01）、星期（sunday）、周末（weekends）或前三个日期格式的组合，表示该日期期间不安排工作。比如某个任务开始时间是周五，持续3天，而excludes限定周末不工作，则任务将持续到下周二才完成。</p></li>
<li><p>参数1：填crit表示重要事件（红色框效果）或者milestone不填。</p></li>
<li><p>参数2：done(已完成，灰色效果)、active(正在进行，浅蓝色效果)、不填（待完成状态，深蓝色效果）。</p></li>
<li><p>参数3：milestone(表示里程碑事件；菱形效果；若任务被声明为里程碑，持续时间应该设为0d，或者开始和结束在同一天)、不填。</p></li>
<li><p>参数4：别名或者不填。</p></li>
<li><p>参数5：任务开始时间，可以是具体日期(YYYY-MM-DD)，也可以是after
task(task为同一个section里的其他任务名或者其别名)。</p></li>
<li><p>参数6：任务结束时间，可以是具体结束日期，也可以是从开始时间算起的持续时间(如3d，20h)。</p></li>
<li><p>PS：参数5和参数6是必填的，但是也可以两个参数统一一个参量表示(如3d，20h)，表示默认从上一个任务的结束时间开始，持续多长时间。</p></li>
</ul>
<p>甘特图示例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line"><span class="code">    dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code">    title       Adding GANTT diagram functionality to mermaid</span></span><br><span class="line"><span class="code">    excludes    weekends</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section A section</span></span><br><span class="line"><span class="code">    Completed task            :done,    des1, 2014-01-06,2014-01-08   </span></span><br><span class="line"><span class="code">    %% 以上任务的参数没有出现crit，说明第一个参数不填，不是重要任务；done表示已完成，des1表示别名，后面是开始和结束时间</span></span><br><span class="line"><span class="code">    Active task               :active,  des2, 2014-01-09, 3d</span></span><br><span class="line"><span class="code">    Future task               :         des3, after des2, 5d</span></span><br><span class="line"><span class="code">    %% 前两个参数不填，表示待完成；after des2表示在Active task结束后开始，5d表示持续5天</span></span><br><span class="line"><span class="code">    Future task2              :         des4, after des3, 5d</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section Critical tasks</span></span><br><span class="line"><span class="code">    Completed task in the critical line :crit, done, 2014-01-06,24h</span></span><br><span class="line"><span class="code">    Implement parser and jison          :crit, done, after des1, 2d</span></span><br><span class="line"><span class="code">    Create tests for parser             :crit, active, 3d</span></span><br><span class="line"><span class="code">    Future task in critical line        :crit, 5d</span></span><br><span class="line"><span class="code">    %% 时间参数只有5d，表示默认从“Create tests for parser”任务的结束时间开始，持续5天</span></span><br><span class="line"><span class="code">    Create tests for renderer           :2d</span></span><br><span class="line"><span class="code">    Functionality added                 :milestone, isadded, 2014-01-25, 0d</span></span><br><span class="line"><span class="code">    %% 里程碑事件，起始时间+0d表示一天内发生</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section Documentation</span></span><br><span class="line"><span class="code">    Describe gantt syntax               :active, a1, after des1, 3d</span></span><br><span class="line"><span class="code">    Add gantt diagram to demo page      :after a1  , 20h</span></span><br><span class="line"><span class="code">    Add another diagram to demo page    :doc1, after a1  , 48h</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section Last section</span></span><br><span class="line"><span class="code">    Describe gantt syntax               :after doc1, 3d</span></span><br><span class="line"><span class="code">    Add gantt diagram to demo page      :20h</span></span><br><span class="line"><span class="code">    Add another diagram to demo page    :48h</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (&quot;sunday&quot;) or &quot;weekends&quot;, but not the word &quot;weekdays&quot;.)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Functionality added                 :milestone, isadded, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
</code></pre>

<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
on=>operation: 执行内容
cn=>condition: 执行是否成功
en=>end: 结束
st->on
on->cn(yes)->en
cn(no)->on</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>

<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>网站有两个<a
href="https://ccloire.com">https://ccloire.com</a>或<a
href="https://ccloire2.com">https://ccloire2.com</a><a href="#fnref1"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <tags>
        <tag>基础工具使用指南</tag>
      </tags>
  </entry>
  <entry>
    <title>如何低代码搭建个人博客？</title>
    <url>/2025/02/26/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="网站搭建基本理论">网站搭建基本理论</h1>
<h2 id="方案介绍">方案介绍</h2>
<p>搭建博客可以使用现成的博客框架，也可以自行开发前后端。这里我们介绍对新手/非计算机专业学生友好的博客框架方案，可以实现低代码搭建个人博客网站。</p>
<p>基于hexo框架+github托管仓库+netlify提供站点部署、DNS、CDN服务搭建个人博客网站</p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/01/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>计算机网络--第一章：计算机网络和因特网</title>
    <url>/2025/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
    <content><![CDATA[<h1 id="计算机网络和因特网">计算机网络和因特网</h1>
<p>章节导读：</p>
<ul>
<li>在这个章节，我们需要先了解什么是因特网（Internet），什么是协议（protocol）。</li>
<li>之后了解什么是网络边缘(network edge)：主机hosts，接入网access
network以及物理媒介physical media。</li>
<li>边缘之后便是网络核心(network
core)的概念：主要了解两种网络技术——分组交换packet
switching以及电路交换circuit
switching，这是互联网的技术基础，会涉及到包(packet）、路由器(router)和链路层交换机(link-layer
switch)这些概念；以及互联网的结构。</li>
<li>再往下是网络性能（performance）：了解数据从源端发送到目的地时数据包是如何丢失(loss)或者延迟(delay)的。这一部分内容会将吞吐量(throughput)作为一种性能指标，衡量字节信号从源转发到目的地的速率。</li>
<li>之后我们需要了解互联网中的协议层(protocol layers)和服务模型(services
models)相关内容</li>
<li>最后便是关于互联网中的安全问题和发展历史介绍。</li>
</ul>
<p>PS：这一章只是计算机网络的整体概述，各部分的具体理论实现会在后面的章节详细展开。</p>
<h2 id="什么是因特网">什么是因特网</h2>
<h3 id="具体构成角度描述">具体构成角度描述</h3>
<img src="https://caimotu.top/Picgo/image-20250409212415280.png" alt="image-20250409212415280" style="zoom:50%;" />

<p>因特网中一个与我们密切相关的组成部分就是主机(hosts)或端系统(end
system)，像我们使用的电脑，手机就属于端系统。<strong>端系统</strong>又通过**通信链路(communication
link)<strong>和</strong>分组交换机(packet
switch)**连接到一起，组成我们熟知的因特网。</p>
<p>通信链路属于网络边缘，实际上由不同类型的物理媒介组成，不同的链路有不同的传输速率（以bit/s或bps）度量。</p>
<p>分组交换机属于网络核心。发送端发送数据时会先将数据分段，每段加上首部字节，这样形成的信息就是<strong>分组</strong>。而分组交换机则负责从一条入通信链路接收到达的分组，向它的一条出通信链路发送该分组（接收和发送分组时如何选择路径在本文“3.网络核心”中的分组交换部分会详细展开）。分组交换机有两种主要类型：路由器和链路层交换机。</p>
<p>**因特网服务提供商(Internet Service
Provider,ISP)**就是通过各种链路互联的分组交换机给端系统提供接入互联网的服务，像住宅区ISP，大学ISP等等。每个ISP本身就是一个由多台分组交换机和多段通信链路以及它的客户端系统组成的网络。</p>
<p>因特网中每个部件在实际运行的时候依赖的其实是一系列互联网<strong>协议(protocol)</strong>，这些协议控制信息的接收和发送。TCP(Transformer
Control Protocol，传输控制协议)和IP(Internet
Protocol，网际协议)就是因特网中两个最重要的协议。这些协议是由因特网工程任务组(Internet
Engineering Task
Force，IETF)来制定研发的，他们的标准文档被称为请求评论(Request For
Comment，RFC)。</p>
<p>因此计算机网络这门课实际上就是在研究这些网络协议的构成，原理和工作方式。</p>
<h3 id="服务角度描述">服务角度描述</h3>
<p>除了上面用具体构成角度来解读互联网以外，我们还可以从服务角度描述互联网，也就是为应用程序提供服务的基础设施(infrastructure)。我们在互联网获取和发送信息都是通过一些网络应用程序实现的，这些应用程序会涉及到多个相互链接的端系统，因此也被称为<strong>分布式应用程序(distributed
application)</strong>。而互联网中的通信基础设施就为这些应用提供了可以用于向另一个端系统发送信息的编程接口，也叫<strong>套接字接口(socket
interface)</strong>，这个接口不仅规定了发送方应用应该遵循的规则，也提供了多种因特网服务，这些内容将在第二章应用层中详细展开。</p>
<h3 id="网络协议">网络协议</h3>
<p>协议定义了在两个或多个通信实体之间交换的报文的格式和顺序，以及发送或接收一条报文或者进行其他事件时通信实体所采取的动作。</p>
<p>下面介绍一个简单的TCP协议例子：当我们在计算机中输入一个网页的URL时，我们的计算机会先向网页的web服务器发送一条连接请求报文，web服务器收到请求后会返回一条连接响应报文。计算机得知能正常请求web的文档后，便会发送一条GET报文，声明要从该web服务器请求访问的页面域名。最后，web服务器便向计算机发送该web网页文件。</p>
<img src="https://caimotu.top/Picgo/image-20250409214625582.png" alt="image-20250409214625582" style="zoom:50%;" />

<h2 id="网络边缘">网络边缘</h2>
<p>网络边缘的组成部分有主机，接入网和物理媒介。</p>
<h3 id="主机">主机：</h3>
<p>运行分布式应用程序，主机之间的通信模式主要有两种：</p>
<ul>
<li>客户/服务器模式 Client-Server (C/S) • 客户端向服务器请求、接收服务 •
比如：蓝牙外设 Bluetooth Peripheral (Slave) -Master</li>
<li>对等模式 Peer-to-Peer (P2P) • 无服务器端 No server-side •
比如：Blockchain/BitTorrent/迅雷/网盘</li>
</ul>
<h3 id="接入网access-network">接入网(access network)：</h3>
<p>接入网指的是端系统在物理上连接到边缘路由器(edge
route)的网络；边缘路由器是端系统连接到远程端系统的路径上的第一台分组交换机。接入网根据使用环境可以分为三种类型：</p>
<ul>
<li>住宅接入 residential access
network(数字用户线，电缆，FTTH，拨号和卫星)</li>
<li>单位接入 institutional access networks(school,
company中常见，以太网和WiFi)</li>
<li>移动接入 mobile access networks (4G/5G和LTE)</li>
</ul>
<p>研究这三种接入网，我们需要重点了解的是它们的传输速率(bits per
second,bps)以及它们的用户在多大程度上和其他用户共享该接入网。</p>
<p>下面就这三种接入网详细展开描述：</p>
<h4 id="住宅接入">住宅接入</h4>
<p>当今的住宅接入有两种比较主流的方式：数字用户线（Digital Subscribe
Line，交换数字数据和语音信息）和电缆（cable，交换数字数据和广播视频信息）。</p>
<ul>
<li><p>数字用户线（DSL）：</p>
<img src="https://caimotu.top/Picgo/image-20250411114800845.png" alt="image-20250411114800845" style="zoom:50%;" />

<p>住宅通过本地电话公司（也即用户的ISP）提供的本地电话接入来获取因特网接入服务。本地电话接入就是用户主机通过现有的电话线（双绞铜线，后面物理媒介部分会详细介绍）来和本地中心局(center
office，CO)中的数字用户线接入复用器(DSLAM)交换数据，交换数据这一动作就意味着主机成功接入互联网。</p>
<p>我们知道家庭电话线只能以模拟信号的形式（也即高频音）传输信息，所以为了同时承载两种信号——数据信号（如因特网接入）和语音信号（如电话呼叫），让它们共享DSL链路，需要采用频分复用技术（frequency
division multiplexing
，FDM，后面的分组交换部分内容会详细介绍），对不同的信号使用不同频率进行编码：</p>
<p>高速下行信道：50kHz~1MHz频段（端系统接收来自基站的数据信号）</p>
<p>中速上行信道：4kHz~50kHz频段（端系统向基站发送数据信号）</p>
<p>普通双向电话信道：0~4kHz频段（端系统和基站双向交换电话信号）</p>
<p>而且为了将数字数据信号以模拟信号的形式进入电话线，DSL接入网还使用了一种叫DSL调制解调器的部件，负责家庭端的信号转换；而信号通过电话线传输给CO端后，会经过数字用户线接入复用器（DSLAM）将上行信道中的模拟信号转化回数字数据信号。</p>
<p>那么不同的信号在端系统和基站又是怎么划分到不同信道并被分别解调的呢？这就又涉及到一种叫<strong>分配器</strong>的部件。</p>
<ul>
<li>当信号从用户端系统发送到基站时：语音信号会经分配器的分隔进入普通双向电话信道；而数据信号则会先由家庭的DSL调制解调器划分进入上行信道（DSL调制解调器在这里不仅起到将数据信号转化为模拟形式的作用，还有将信道分为上行与下行信道的作用），再进入分配器和语音信号一起通过电话线DSL传输。在到达基站也就是CO一侧后，上行信道中的模拟信号又会经DSLAM转化回数字数据信号，并在DSLAM作用下和普通双向电话信道中的语音信号分隔开，分别送往互联网和电话网。</li>
<li>当信号从基站发送到用户端系统时：传输过程与上述反向同理，但数据信号要经下行信道传输。</li>
</ul>
<p>（PS：成百上千个家庭的数字用户线接入的是同一个DSLAM，但DSL接入网在传输时容量和带宽是不共享的，每个家庭都拥有独享的数字用户线）</p>
<p>在不同的信道，由于编码频率不同，信号传输的速率也会有所不同。DSL标准定义了多个传输速率(随技术变革会越来越高)，下行传输速率一般为24—52Mbps，上行传播速率一般为3.5—16Mbps（下行比上行快，因此这种接入也被称为不对称接入）。而在实际的传输服务中，传输速率可能会比上述标准低，这是因为本地电话公司会提供分等级的服务，低级服务的传输速率可能会比较低；以及实际的住宅和中心局距离，双绞线的规范等因素都会影响传输速率。（PS：DSL接入网一般只能在住宅与中心局距离5~10英里内的情况下使用）</p></li>
<li><p>电缆因特网接入：</p>
<img src="https://caimotu.top/Picgo/image-20250411115649973.png" alt="image-20250411115649973" style="zoom: 33%;" />

<p>住宅利用有线电视公司提供的有线电视基础设施（光纤和同轴电缆）来获取因特网接入服务。由于整个系统使用的是光纤和同轴电缆，因此也被称为混合光纤同轴系统（Hybrid
Fiber Coax，HFC）。</p>
<ul>
<li><p>与DSL接入使用DSL调制解调器不同，电缆因特网接入需要使用电缆调制解调器（cable
modem），将数字信号转为模拟信号并将HFC网络划分为上行和下行信道（没有像DSL接入网那样的电话双向信道）；而在电缆头端，则使用电缆调制解调器终端系统（CMTS）来把下行信道中的模拟信号转回数字信号（功能相当于DSLAM）。</p>
<p>另一个不同之处是电缆因特网接入的用户共享广播媒体，也就是共享上行和下行信道，因此多个用户同时经下行信道下载电缆头端发送的视频文件时，传输速率会大大降低甚至发生碰撞问题（第6章会更加详细描述）。</p></li>
<li><p>与DSL接入相同的是，电缆因特网接入也属于不对称接入，即下行信道的传播速率要比上行信道的高。电缆因特网接入可提供40Mbps—1.2Gbps的下行传输速率和30—100Mbps的上行传输速率。</p></li>
</ul></li>
<li><p>DSL和电缆是以往大多数家庭使用的接入网形式，但一种更高速率的新兴技术——光纤到户（Fiber
To The Home，FTTH）逐渐在各个国家的家庭里普及。</p>
<img src="C:\Users\15458\AppData\Roaming\Typora\typora-user-images\image-20250411150817230.png" alt="image-20250411150817230" style="zoom:33%;" />

<p>这种技术是从本地中心局直接提供一条到家庭的光线路径，最简单的光纤分布网络就是直接网络（中心局发出一根多个家庭共享的光纤，在接近住户处再由分配器分成每户一根光纤），它分为两种体系结构：有源光纤网络（Active
Optical Network，AON，第六章详细讨论）和无源光纤网络（Passive Optical
Network，PON）。</p>
<p>如图是PON体系的示意图，这里我们可以简单解释以下其传输过程：每个家庭都配有一个光纤网络接收器（ONT），并由专门的光纤接到光纤分配器上，多个家庭通过分配器集结到一根共享的光纤上，该光纤再和中心局中的光纤线路端接器（OLT）相连。</p></li>
<li><p>在以上三种接入网形式无法提供时（如偏远乡村环境），家庭有时也会使用卫星链路或者拨号接入（类似DSL，但速率极低）。</p></li>
</ul>
<h4 id="单位接入">单位接入</h4>
<img src="https://caimotu.top/Picgo/image-20250411201727538.png" alt="image-20250411201727538" style="zoom:50%;" />

<p>在公司，大学或者如今越来越多的家庭里，通常会使用**局域网（LAN）**来将端系统接入边缘路由器。</p>
<p>有线局域网接入最流行的技术就是<strong>以太网</strong>；而无线局域网接入最流行的技术则是我们当今无处不在的<strong>WiFi</strong>。以太网接入中，用户和web服务器使用双绞铜线与一台以太网交换机相连（第六章将详细介绍），这些以太网交换机或者他们相连形成的网络再去连接到更大的因特网核心。WiFi接入中，用户会向一个无线基站接入点发送或接收分组，这个接入点再和企业网相连接（通常就是通过以太网交换机接入有线因特网，因此也是无线局域网和有线局域网的结合）。</p>
<p>以太网的传输速率通常有1Gbps，10Gbps，最高可达100Gbps；而WiFi传输速率则比较慢，如今的WiFi
5可提供3.5Gbps速率，WiFi 6可提供9.6Gbps的速率，WiFi
7可提供高达30Gbps的速率。</p>
<h4 id="移动接入">移动接入</h4>
<p>在局域网接入中，往往端系统都需要在接入点或以太网交换机的附近一定范围内；而如今4G/5G的通信方式允许我们在大范围内移动的同时也保持接入因特网，在这种接入网中，端系统通过蜂窝网提供商运营的基站来发送和接收分组的，允许用户在基站的数万米内依然保持连接。</p>
<p>下图是一个经典的家庭网络示意图，包含了一个家庭可能使用的每一种接入网方式。PS：电缆接入网/DSL接入网中的调制解调器和有线局域网/无线局域网的以太网交换机以及互联了移动通信基站的路由器往往是装在一个盒子里的，统称为家庭路由器。</p>
<img src="https://caimotu.top/Picgo/image-20250411142347759.png" style="zoom: 33%;" />

<h3 id="物理媒介physical-media">物理媒介(physical media)：</h3>
<p>物理媒介分为两种类型：导引型媒体和非导引型媒体。</p>
<h4 id="双绞铜线">双绞铜线</h4>
<p>最便宜且最常用的导引型传输媒体就是双绞铜线。DSL技术和局域网接入都会使用到双绞铜线这种材料。</p>
<img src="https://caimotu.top/Picgo/image-20250412122442735.png" alt="image-20250412122442735" style="zoom:33%;" />

<h4 id="同轴电缆">同轴电缆</h4>
<p>同轴电缆和双绞铜线类似都由两个铜导体组成，不同的是同轴电缆中这两个导体同心而非并行。由于这种结构以及它特殊的绝缘层和保护层，同轴电缆能达到较高的数据传输速率，常被用作共享媒体，充当前面所述的电缆因特网接入/电视系统的物理媒介。</p>
<img src="https://caimotu.top/Picgo/image-20250412124318439.png" alt="image-20250412124318439" style="zoom:33%;" />

<h4 id="光纤">光纤</h4>
<ul>
<li><p>导引光脉冲，每个脉冲表示一个bit，在玻璃纤维中传输</p></li>
<li><p>高速:</p>
<ul>
<li>如10 Gbps-100Gbps传输速率</li>
</ul></li>
<li><p>低误码率:</p></li>
<li><p>中继器相隔很远</p></li>
<li><p>不受电磁噪声影响</p></li>
<li><p>光信号衰减极低</p></li>
<li><p>光设备成本高，因此光纤多用于长途运输而非短途传输（如家庭接入网或者LAN局域网就很少用光纤）</p></li>
</ul>
<h4 id="无线电">无线电</h4>
<img src="https://caimotu.top/Picgo/image-20250412125530083.png" alt="image-20250412125530083" style="zoom:33%;" />

<h2 id="网络核心">网络核心</h2>
<p>讨论完网络边缘，我们便开始讨论网络核心部分——链接因特网端系统的分组交换机和通信链路构成的网状网络。</p>
<p>在本文一开始我们介绍过分组的概念，也就是端系统发送出来的数据分段后加上首部字节后形成的数据段。那么这些数据段是如何在端系统之间交换的呢。方式有两种——分组交换和电路交换。下面我们分别简要讨论这两种</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>南京4天3夜攻略</title>
    <url>/2025/06/12/%E5%8D%97%E4%BA%AC4%E5%A4%A93%E5%A4%9C%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<p><img src="https://caimotu.top/Picgo/image-20250612162816123.png"
alt="image-20250612162816123" /></p>
<h1 id="73">7.3</h1>
<h2 id="下午13301800">下午（13：30~18：00）：</h2>
<ul>
<li><p>（公寓打车17分钟）鸡鸣寺（提前一天预约，从山门进）（1.5h）</p></li>
<li><p>→步行15分钟到明城墙（0.5h）</p></li>
<li><p>→步行十分钟进玄武湖公园（2.5h）</p></li>
<li><p>→先锋书店分店＆寻魏金陵十二菜、鸭血粉丝汤（晚饭备选）</p></li>
</ul>
<img src="https://caimotu.top/Picgo/wps1.png" alt="img" style="zoom: 33%;" />

<img src="https://caimotu.top/Picgo/wps2.png" alt="img" style="zoom:33%;" />

<h2 id="晚上18302300">晚上：（18：30~23：00）</h2>
<ul>
<li><p>岗子村地铁站到夫子庙地铁站</p></li>
<li><p>→再步行十分钟到秦淮河夫子庙（小吃＋夜景），夫子庙内部门票30r</p></li>
<li><p>文德桥蓝调时刻：18：00~18：30左右</p></li>
<li><p>游船路线：携程搜“秦淮河画舫”，夜游游船票价120r，码头--&gt;白鹭洲--&gt;七彩水街—&gt;东水关—&gt;中华门—&gt;返程</p></li>
<li><p>避雷：夫子庙里的吃的；附近可去：小厨娘昆音雅宴、韩复兴老字号</p></li>
<li><p>老东门：金陵美术馆、陆式梅花糕、蒋友记、朱记小郑……</p></li>
</ul>
<p><img src="https://caimotu.top/Picgo/image-20250612171319927.png"
alt="image-20250612171319927" /></p>
<h1 id="74">7.4</h1>
<h2 id="钟山风景区6301500-南博15001700">钟山风景区（6：30~15：00）+
南博（15：00~17：00）</h2>
<ul>
<li>钟山风景区（中山陵提前七天预约，免费；明孝陵，灵谷寺，美龄宫，音乐台都提前1天预约，套票100r，美团直接搜）</li>
<li>景区观光车10r/人次，或者租电动/景区黑车（备选）</li>
</ul>
<p><img src="https://caimotu.top/Picgo/image-20250612191224381.png"
alt="image-20250612191224381" /></p>
<ul>
<li><p>南博提前7天预约，攻略参考：<a
href="http://xhslink.com/a/xIvJtxrbsCMeb">http://xhslink.com/a/xIvJtxrbsCMeb</a></p>
<p>两小时速通路线：</p>
<img src="https://caimotu.top/Picgo/fe5861d2d7cf63c04d1dbf5e56c65c0.jpg" alt="fe5861d2d7cf63c04d1dbf5e56c65c0" style="zoom: 50%;" />
</li>
</ul>
<h2 id="晚上新街口">晚上新街口</h2>
<ul>
<li>4号口孙中山铜像，7号口德基广场（7个厕所，8楼美术馆）</li>
<li>15号口对面石鼓路美食街</li>
<li>寻裕记现炒浇头、小潘记鸭血粉丝、澳挞……</li>
</ul>
<h1 id="75">7.5</h1>
<h2 id="上午">上午</h2>
<ul>
<li><p>总统府（提前三天预约，35r，用学生证可半价，8：30开，可考虑租讲解）</p></li>
<li><p>南博（前一天赶不及可以等7.5去）</p>
<img src="https://caimotu.top/Picgo/3dba4c3a094ff2700005bb3b714bda5.jpg" alt="3dba4c3a094ff2700005bb3b714bda5" style="zoom: 50%;" />
</li>
</ul>
<h2 id="下午">下午</h2>
<ul>
<li><p>牛首山（门票学生证80r），打车到东门即可。</p></li>
<li><p>🏞️参观路线
1️⃣走到山顶的观光车站后，乘坐扶手梯，再步行一小段便可以看到📍“佛顶圣境”四个大字，旁边的入口处就是网红打卡机位啦！
2️⃣再坐扶手梯往上+走过一小段楼梯，就可以看到📍“水池和大榴莲”了！水池和大榴莲的长廊都是很出片的地方！
3️⃣“大榴莲”的第一层可以看📍“卧佛”
4️⃣看完“卧佛”后，从大榴莲左边按照指示牌方向去参观📍“地宫”，进入地宫前门口就有免费的鞋套更换的噢
5️⃣先坐扶手梯下到“佛五层”也就是最深的一层，参观“千佛殿”，接着可以坐电梯上到“佛四层”的小阳台，拍网红推门视频
6️⃣看完之后坐电梯回到一层就好啦，中途会有一些文创店，也有很多佛像和雕刻可以观看
7️⃣出来后有时间可以去佛顶塔参观</p>
<p><img src="https://caimotu.top/Picgo/image-20250612203244755.png"
alt="image-20250612203244755" /></p></li>
</ul>
<h2 id="晚上">晚上</h2>
<p>金陵小镇，夜宵君陵紫金。</p>
<p>开放时间：到晚上九点半，学生票25，线上购票即可。</p>
<ul>
<li>游玩路线 桃蹊→文心馆→邻曲巷→满庭芳（客栈）→临霄台→绿筱园</li>
<li>演出信息 1️⃣解音台 ▪️金陵微笑（舞蹈表演，下午2点和4点两场，5min）
▪️云织箴言（舞蹈表演，晚上7点和8点两场，5min） 2️⃣文心馆
▪️流转时空（裸眼3D展示，循环播放）
▪️天下文枢（文心馆广场，迎宾仪式，上午10点半和下午3点、6点三场，5min）
▪️千里仁风（艺术装置，上午10：35和下午15：05、18：05三场，5min）
▪️古风漫步（古装巡游，文心馆广场至解音台，下午3点一场，10min） 3️⃣邻曲巷
▪️欢喜市集（氛围互动，下午4点一场，1h） 4️⃣临霄台
▪️瑞雪金陵（场景造雪，上午11点半一场，10min）
▪️梦雪樱飞（舞蹈表演，下午1点和5点两场，10min）
▪️琴笛引梅（灯光秀，晚上7：10和8：10两场，4min） 5️⃣绿筱园
▪️长相知（灯光秀，晚上7：20和8：20两场，5min）</li>
<li>园内娱乐 ✅汉服妆造 ✅漆扇制作（文心馆） ✅围炉煮茶 ✅盖章
1️⃣文心馆出口×5枚 （服务台1枚，漆扇制作处4枚）
2️⃣前于记×1枚（墨不太足）</li>
</ul>
<h1 id="76">7.6</h1>
<h2 id="上午-1">上午</h2>
<ul>
<li><p>先导航到先锋书店（颐和路店）
从这一端的颐和路开始Citywalk不用走回头路！</p>
<p>🚶路线：颐和路—西桥—金银街—南秀村—陶谷新村—先锋书店（五台山店）</p>
<p>👣一路的风景都很好看，还有很多咖啡店、古着店、文创店、特色餐厅等等，拍照打卡，闲逛聊天都很适合～</p>
<p>🍛逛完后去吃了科巷的石锅轩，锅巴很香，温泉蛋嫩滑，拌饭好吃！</p>
<p>📍颐和路： 一条颐和路，半部民国史
晴天阳光透过树叶缝隙，斑驳的光影洒在黄墙上，歪脖子树依然浪漫。很多人在网红歪脖子树前打卡，可以提前规划好时间</p>
<p>📍西桥： 抬头是时代，低头是市井
沿着颐和路走经过颐和公馆就可以到网红机位打卡（宁海中学北门可打卡紫峰大厦拍照机位）</p>
<p>📍金银街： 南大旁边的小街，有一些小摊、店铺和涂鸦墙
可以打卡“我们如此热爱南京”的涂鸦！</p>
<p>📍南秀村、陶谷新村：
咖啡店、古着店、文创店和特色餐厅聚集区，走累了可以停下来休息休息，小店和居民区完美融合，既年轻又充满生活气息
真的很羡慕南大的同学，学校周围有那么多有意思的小店和舒适的社区🥹</p>
<p>推荐👍
-朱氏梅花糕：陶谷新村巷口上过电视的梅花糕！尝了豆沙味道很好吃，外皮脆脆的，内馅香甜但有点烫</p>
<p>-学人书店：在陶谷新村里面。很多旧书，唱片，各种国内外旧物件，中古装饰品，很有氛围，可以慢慢看，慢慢淘</p>
<p>📍先锋书店（五台山店）：
书店的风格、陈列都很有特色，拍照出片所以人比较多。可以静下心来阅读，看看明信片墙上别人的故事，也写下自己的故事，感受文字的温度</p>
<img src="C:\Users\15458\Documents\WeChat Files\wxid_jy7sqq5gztjd22\FileStorage\Temp\8aafcf0006c51f3c641b66eb5492ee6.jpg" alt="8aafcf0006c51f3c641b66eb5492ee6" style="zoom:33%;" />
</li>
</ul>
<h2 id="下午-1">下午</h2>
<p>南京大屠杀死难者纪念馆（提前7天预约）</p>
<p>PS：吃滴</p>
<img src="https://caimotu.top/Picgo/c0c964fca484bd8464f4dc44fea9c80.jpg" alt="c0c964fca484bd8464f4dc44fea9c80" style="zoom:33%;" />
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>计网实验--基本网络指令</title>
    <url>/2025/04/30/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C-%E5%9F%BA%E6%9C%AC%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>《Attention is all your need》论文笔记</title>
    <url>/2025/04/25/%E3%80%8AAttention%20is%20all%20your%20need%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="论文逐步分解读">论文逐步分解读</h1>
<p>论文网址：</p>
<p><a
href="https://paperswithcode.com/paper/attention-is-all-you-need">https://paperswithcode.com/paper/attention-is-all-you-need</a></p>
<p><a
href="https://arxiv.org/abs/1706.03762">https://arxiv.org/abs/1706.03762</a></p>
<h2 id="transformer模型论文摘要解读">Transformer模型论文摘要解读</h2>
<p>这篇论文是著名的"Attention Is All You
Need"论文的摘要，介绍了Transformer模型，这是深度学习和自然语言处理领域的一个里程碑式创新。以下是主要内容解读：</p>
<h3 id="研究背景与创新">研究背景与创新</h3>
<ul>
<li><p>之前的主流序列转导模型都基于复杂的循环神经网络(RNN)或卷积神经网络(CNN)，包含编码器和解码器结构</p></li>
<li><p>性能最好的模型还通过注意力机制连接编码器和解码器</p></li>
<li><p>论文提出了全新的网络架构"Transformer"，完全基于注意力机制，彻底摒弃了循环和卷积结构</p></li>
</ul>
<h3 id="实验结果">实验结果</h3>
<ul>
<li><p>在两个机器翻译任务上的实验表明，Transformer模型质量更优，同时更易于并行化，训练时间显著缩短</p></li>
<li><p>在WMT 2014英德翻译任务上达到28.4
BLEU分，比当时最好的结果(包括集成模型)高出2个BLEU以上</p></li>
<li><p>在WMT 2014英法翻译任务上，单模型达到41.8
BLEU的最新水平，仅用8个GPU训练3.5天，训练成本只是文献中最佳模型的一小部分</p></li>
</ul>
<h3 id="泛化能力">泛化能力</h3>
<ul>
<li>Transformer在其他任务上表现良好，成功应用于英语句法分析，无论是大规模还是有限的训练数据环境</li>
</ul>
<h2 id="研究背景">研究背景</h2>
<p>论文开篇指出：</p>
<ul>
<li><p>循环神经网络(RNN)特别是LSTM和GRU已成为序列建模和转导问题(如语言建模和机器翻译)的最先进方法</p></li>
<li><p>许多研究不断推动循环语言模型和编码器-解码器架构的边界</p></li>
</ul>
<h3 id="现有方法的局限性">现有方法的局限性</h3>
<p>RNN的关键局限：</p>
<ul>
<li><p>循环模型通常沿着输入和输出序列的符号位置进行计算</p></li>
<li><p>这种本质上的顺序性质阻碍了训练样例内的并行化，在更长序列长度下尤为关键</p></li>
<li><p>虽然一些工作通过分解技巧和条件计算提高了计算效率，但顺序计算的基本约束仍然存在</p></li>
</ul>
<h3 id="注意力机制的重要性">注意力机制的重要性</h3>
<ul>
<li><p>注意力机制已成为序列建模和转导模型的重要组成部分，允许在不考虑输入或输出序列中距离的情况下建模依赖关系</p></li>
<li><p>然而，大多数情况下，此类注意力机制与循环网络结合使用</p></li>
</ul>
<h3 id="transformer模型的提出">Transformer模型的提出</h3>
<ul>
<li><p>作者提出Transformer，一种完全放弃循环结构，而是完全依赖注意力机制来获取输入和输出间全局依赖关系的架构</p></li>
<li><p>Transformer允许更多并行化，在8个P100
GPU上训练仅12小时就达到机器翻译的新水平</p></li>
</ul>
<h3 id="相关工作比较">相关工作比较</h3>
<p>论文讨论了其他减少顺序计算的模型：</p>
<ul>
<li><p>Extended Neural
GPU、ByteNet和ConvS2S都使用CNN作为基本构建块</p></li>
<li><p>这些模型中，关联两个任意输入或输出位置的操作数随距离增长(ConvS2S线性增长，ByteNet对数增长)</p></li>
<li><p>Transformer将此减少为常数级别的操作，尽管以注意力加权位置平均导致的有效分辨率降低为代价，但后续通过多头注意力机制进行了补偿（具体方法在3.2节）</p></li>
</ul>
<p>论文特别提到自注意力(self-attention)机制：</p>
<ul>
<li><p>用于关联单个序列中的不同位置以计算序列表示</p></li>
<li><p>已成功应用于阅读理解、摘要生成、文本蕴含和学习任务无关的句子表示</p></li>
</ul>
<h2 id="模型架构">模型架构</h2>
<h3
id="二编码器encoder细节"><strong>二、编码器（Encoder）细节</strong></h3>
<h4 id="1-单层结构"><strong>1. 单层结构</strong></h4>
<p>每层编码器包含两个子层：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 → 多头自注意力 → 残差连接+层归一化 → 前馈网络 → 残差连接+层归一化 → 输出</span><br></pre></td></tr></table></figure>

<h4 id="2-关键技术解析"><strong>2. 关键技术解析</strong></h4>
<ul>
<li><strong>多头自注意力 (Multi-Head Self-Attention)</strong>
<ul>
<li><strong>作用</strong>：让每个词查看全句其他词，动态计算关联权重
例：句子"Animal didn't cross the street because it was too
tired"中，"it"通过自注意力定位到"Animal"</li>
<li><strong>多头机制</strong>：将512维向量拆分为8个64维头，并行计算后拼接（类似8组不同滤镜观察句子）</li>
</ul></li>
<li><strong>前馈网络 (Position-wise FFN)</strong>
<ul>
<li><strong>结构</strong>：线性层→ReLU→线性层（公式：FFN(x)=max(0,xW1+b1)W2+b2）</li>
<li><strong>特性</strong>：对每个词独立处理，无位置交互（与自注意力互补）</li>
</ul></li>
<li><strong>残差连接 + 层归一化</strong>
<ul>
<li><strong>操作</strong>：输出 = LayerNorm(原始x + 计算后的x)</li>
<li><strong>目的</strong>：缓解梯度消失，加速深层网络训练</li>
<li><strong>维度保持</strong>：所有子层输出保持d_model=512，便于叠加</li>
</ul></li>
</ul>
<h4 id="3-6层堆叠的意义"><strong>3. 6层堆叠的意义</strong></h4>
<ul>
<li>底层：学习局部语法（如名词短语结构）</li>
<li>中层：捕捉句间逻辑关系（因果、转折）</li>
<li>高层：整合全局语义（篇章级信息）</li>
</ul>
<hr />
<h3
id="三解码器decoder细节"><strong>三、解码器（Decoder）细节</strong></h3>
<h4 id="1-单层结构-1"><strong>1. 单层结构</strong></h4>
<p>每层解码器包含三个子层：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 → 掩码自注意力 → 残差连接+层归一化 → 编码器-解码器注意力 → 残差连接+层归一化 → 前馈网络 → 残接+层归一化 → 输出</span><br></pre></td></tr></table></figure>

<h4 id="2-核心差异点"><strong>2. 核心差异点</strong></h4>
<ul>
<li><strong>掩码自注意力 (Masked Self-Attention)</strong>
<ul>
<li><strong>实现方式</strong>：在softmax前将未来位置权重设为-∞</li>
<li><strong>作用</strong>：确保预测第t个词时仅依赖前t-1个词 例：生成"I
love"时，第三个词只能基于前两个词预测</li>
</ul></li>
<li><strong>编码器-解码器注意力</strong>
<ul>
<li><strong>Query来源</strong>：解码器当前状态</li>
<li><strong>Key/Value来源</strong>：编码器最终输出</li>
<li><strong>功能</strong>：实现源语言与目标语言的词对齐
可视化案例：翻译"knowledge"时可能重点关注"知识"</li>
</ul></li>
</ul>
<h4 id="3-位置偏移技巧"><strong>3. 位置偏移技巧</strong></h4>
<ul>
<li><strong>输出嵌入右移一位</strong>：
训练时解码器输入是目标序列右移后的结果，确保当前位置预测仅依赖历史信息</li>
</ul>
<hr />
<h3 id="q---a">Q---A</h3>
<h4 id="q1-为什么每层都要残差连接"><strong>Q1:
为什么每层都要残差连接？</strong></h4>
<ul>
<li>深层网络信号传递容易衰减，残差结构保留原始信息（类似高速公路）</li>
<li>实验证明：无残差连接时6层网络难以收敛</li>
</ul>
<h4 id="q2-层归一化-vs-批归一化"><strong>Q2: 层归一化 vs
批归一化</strong></h4>
<ul>
<li>批归一化：对同一批次内所有样本的同一特征做归一化（适合CV）</li>
<li><strong>层归一化</strong>：对单个样本的所有特征做归一化（更适合NLP变长序列）</li>
</ul>
<h4 id="q3-为什么用6层而不是更多"><strong>Q3:
为什么用6层而不是更多？</strong></h4>
<ul>
<li>论文实验表明：6层在翻译任务上达到效率与效果的平衡
（后续研究如BERT使用12/24层，需更多数据与算力支持）</li>
</ul>
<hr />
<h3 id="五实例演算流程"><strong>五、实例演算流程</strong></h3>
<p>以英译中为例：</p>
<ol type="1">
<li><strong>编码过程</strong> 输入："The cat sat on the mat"
经过6层编码器后，每个词被转换为包含上下文信息的512维向量</li>
<li><strong>解码过程</strong> 生成："猫坐在垫子上"
<ul>
<li>第1步：接收起始符，通过掩码自注意力初始化状态</li>
<li>第2步：生成"猫"时，编码器-解码器注意力聚焦"cat"</li>
<li>第3步：生成"坐"时，自注意力关联"sat"，编码器注意力保持对"cat"关注</li>
<li>后续步骤同理，直至生成终止符</li>
</ul></li>
</ol>
<hr />
<p><strong>关键结论</strong>：Transformer通过<strong>堆叠自注意力层+位置感知前馈网络</strong>，实现了：
① 完全并行化计算 ② 长距离依赖捕捉 ③
端到端对齐能力。这种设计成为后续GPT、BERT等模型的基石。</p>
]]></content>
      <tags>
        <tag>多模态大模型论文学习</tag>
      </tags>
  </entry>
</search>
